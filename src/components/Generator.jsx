import React, { useState } from "react";
import ShareIcon from '@mui/icons-material/Share';
import SendIcon from '@mui/icons-material/Send';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import { CircularIndeterminate } from "../loadinganimation";
import { Auth, db, storage } from '../firebase-config';
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage';
import { v4 } from 'uuid';
import { collection, addDoc } from 'firebase/firestore';
import { useAuthState } from "react-firebase-hooks/auth"

import { API_TOKEN } from "../firebase-config";

const ImageGenerationForm = () => {
    const [loading, setLoading] = useState(false);
    const [output, setOutput] = useState(null);
    const [prompt, setPrompt] = useState("")
    const [imageFile, setImageFile] = useState(null);

    const [user] = useAuthState(Auth)
    const postRef = collection(db, "post")

    const uploadImage = async () => {
        if (imageFile !== null) {
            const imageRef = ref(storage, `images/${imageFile.name + v4()}`)
            uploadBytes(imageRef, imageFile)
                .then(() => {
                    getDownloadURL(imageRef)
                        .then((url) => {
                            if (prompt !== "") {
                                addDoc(postRef, {
                                    prompt: prompt,
                                    image: url,
                                    logo: user.photoURL,
                                    user: user.displayName,
                                })
                                    .then(res => alert("posted"))
                                    .catch(err => console.log(err))
                            }
                        })
                })
                .catch(err => console.log(err))
        }

    }

    const handleSubmit = async (event) => {
        event.preventDefault();
        setLoading(true);

        const input = event.target.elements.input.value;
        console.log(input);
        setPrompt(input)
        const response = await fetch(
            "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5",
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${API_TOKEN}`,
                },
                body: JSON.stringify({ inputs: input }),
            }
        );

        if (!response.ok) {
            throw new Error("Failed to generate image");
        }

        const blob = await response.blob();
        setOutput(URL.createObjectURL(blob));
        setImageFile(new File([blob], "art.png", { type: "image/png" }));
        setLoading(false);
    };

    const handleDownload = () => {
        const link = document.createElement("a");
        link.href = output;
        link.download = "image.png";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <main className="flex first-line:sm:p-3 px-2 py-3 w-full bg-[#fffaf0] min-h-[calc(100vh-73px)]">
            <div className="imageGen ">
                <div>
                    <h1 className="font-extrabold text-[#222328] text-[32px]">Create Images</h1>
                    <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by Hugging Face AI</p>
                </div>
                <form className="generate-form mt-2" onSubmit={handleSubmit}>
                    <input type="text" className="shadow-md shadow-gray-500" name="input" placeholder="Type your prompt here..." onChange={(e)=>setPrompt(e.target.value)}/>
                    <button type="submit" className="button text-white items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                        </svg>

                    </button>
                </form>
                {loading && <div className="loading"><p><CircularIndeterminate /></p></div>}
                {!loading && output && (
                    <div className="result-image">
                        <img src={output} alt="art" />
                        <div className="action">
                            <button onClick={handleDownload}><FileDownloadIcon /></button>
                            {user && <button onClick={uploadImage}><SendIcon /></button>}
                        </div>
                    </div>
                )}

            </div>
        </main>
    );

};

export default ImageGenerationForm;